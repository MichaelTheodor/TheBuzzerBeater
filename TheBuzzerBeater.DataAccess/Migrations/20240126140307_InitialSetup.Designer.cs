// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheBuzzerBeater.DataAccess.Data;

#nullable disable

namespace TheBuzzerBeater.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240126140307_InitialSetup")]
    partial class InitialSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TheBuzzerBeater.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            DisplayOrder = 1,
                            Name = "Air Pumps"
                        },
                        new
                        {
                            CategoryId = 2,
                            DisplayOrder = 2,
                            Name = "Arm Sleeves"
                        },
                        new
                        {
                            CategoryId = 3,
                            DisplayOrder = 3,
                            Name = "Balls"
                        },
                        new
                        {
                            CategoryId = 4,
                            DisplayOrder = 4,
                            Name = "Basket"
                        },
                        new
                        {
                            CategoryId = 5,
                            DisplayOrder = 5,
                            Name = "Basketball Nets"
                        },
                        new
                        {
                            CategoryId = 6,
                            DisplayOrder = 6,
                            Name = "Beanies"
                        },
                        new
                        {
                            CategoryId = 7,
                            DisplayOrder = 7,
                            Name = "Hats"
                        },
                        new
                        {
                            CategoryId = 8,
                            DisplayOrder = 8,
                            Name = "Headbands - Wristbands"
                        },
                        new
                        {
                            CategoryId = 9,
                            DisplayOrder = 9,
                            Name = "Hoodies"
                        },
                        new
                        {
                            CategoryId = 10,
                            DisplayOrder = 10,
                            Name = "Mugs & Cups"
                        },
                        new
                        {
                            CategoryId = 11,
                            DisplayOrder = 11,
                            Name = "ΝΒΑ Jerseys"
                        },
                        new
                        {
                            CategoryId = 12,
                            DisplayOrder = 12,
                            Name = "ΝΒΑ Retro Jerseys"
                        },
                        new
                        {
                            CategoryId = 13,
                            DisplayOrder = 13,
                            Name = "Shoes"
                        },
                        new
                        {
                            CategoryId = 14,
                            DisplayOrder = 14,
                            Name = "Socks"
                        },
                        new
                        {
                            CategoryId = 15,
                            DisplayOrder = 15,
                            Name = "Stickers"
                        });
                });

            modelBuilder.Entity("TheBuzzerBeater.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderHeaderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("TheBuzzerBeater.Models.OrderHeader", b =>
                {
                    b.Property<int>("OrderHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderHeaderId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderHeaderId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("TheBuzzerBeater.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 10,
                            Description = "Ceramic mugs and cups with your favorite NBA team",
                            ImageUrl = "\\images\\products\\back-me-up-cup-nba-boston-celtics.jpg",
                            Name = "Nba Boston Celtics Cup",
                            Price = 6.0
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 10,
                            Description = "Ceramic mugs and cups with your favorite NBA team",
                            ImageUrl = "\\images\\products\\back-me-up-cup-nba-bucks.jpg",
                            Name = "Nba Milwaukee Bucks Cup",
                            Price = 6.0
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 10,
                            Description = "Ceramic mugs and cups with your favorite NBA team",
                            ImageUrl = "\\images\\products\\back-me-up-cup-nba-bulls.jpg",
                            Name = "Nba Chicago Bulls Cup",
                            Price = 6.0
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 10,
                            Description = "Ceramic mugs and cups with your favorite NBA team",
                            ImageUrl = "\\images\\products\\back-me-up-cup-nba-la-lakers (1).jpg",
                            Name = "Nba Los Angeles Lakers Cup",
                            Price = 6.0
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 10,
                            Description = "Ceramic mugs and cups with your favorite NBA team",
                            ImageUrl = "\\images\\products\\back-me-up-cup-nba-la-lakers.jpg",
                            Name = "Nba Los Angeles Lakers Cup 2",
                            Price = 6.0
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 10,
                            Description = "Ceramic mugs and cups with your favorite NBA team",
                            ImageUrl = "\\images\\products\\back-me-up-cup-nba-logo.jpg",
                            Name = "Nba Logo Cup",
                            Price = 5.0
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1,
                            Description = "Quickly inflate your favorite ball with the Jordan Essentials Ball Pump. Its compact design makes it easy to carry, and ideal for supplementing the ball air.",
                            ImageUrl = "\\images\\products\\Jordan Essential Ball Pump Intl.jpg",
                            Name = "Jordan Essential Ball Pump Intl",
                            Price = 19.989999999999998
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Nike Essential Ball Pump Intl.jpg",
                            Name = "Nike Essential Ball Pump Intl",
                            Price = 16.989999999999998
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 1,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Nike Hyperspeed Ball Pump Intl Swoosh.jpg",
                            Name = "Nike Hyperspeed Ball Pump Intl Swoosh",
                            Price = 24.5
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 1,
                            Description = "The Spalding dual action power pump comes with an attached extension hose. The 12” pump fits all types of valves (includes two different sized needles) and pumps air by pushing and pulling action.",
                            ImageUrl = "\\images\\products\\Spalding 12' Dual Action Power Pump.jpg",
                            Name = "Spalding 12' Dual Action Power Pump",
                            Price = 18.0
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 1,
                            Description = "Dual action Aluminium pump with durable extension hose.",
                            ImageUrl = "\\images\\products\\Wilson Nba Authentic Aluminum Pump.jpg",
                            Name = "Wilson Nba Authentic Aluminum Pump",
                            Price = 21.899999999999999
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 1,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 11,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 11,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 11,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 11,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 11,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 11,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 11,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 11,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 31,
                            CategoryId = 11,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 32,
                            CategoryId = 12,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 33,
                            CategoryId = 13,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 34,
                            CategoryId = 14,
                            Description = "This pump is light and easy to use so you can take it with you wherever you go. It is made for all basketballs.",
                            ImageUrl = "\\images\\products\\Wilson NBA DVR Pump Kit.jpg",
                            Name = "Wilson NBA DVR Pump Kit",
                            Price = 18.600000000000001
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 15,
                            Description = "A pack of two stickers featuring your favourite NBA team!",
                            ImageUrl = "\\images\\products\\Back Me Up NBA Brooklyn Nets Stickers.jpg",
                            Name = "NBA Brooklyn Nets Stickers",
                            Price = 0.90000000000000002
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 15,
                            Description = "A pack of two stickers featuring your favourite NBA team!",
                            ImageUrl = "\\images\\products\\Back Me Up NBA Chicago Bulls Stickers.png",
                            Name = "NBA Chicago Bulls Stickers",
                            Price = 0.90000000000000002
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 15,
                            Description = "A pack of two stickers featuring your favourite NBA team!",
                            ImageUrl = "\\images\\products\\Back Me Up NBA Dallas Mavericks Stickers.png",
                            Name = "NBA Dallas Mavericks Stickers",
                            Price = 0.90000000000000002
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 15,
                            Description = "A pack of two stickers featuring your favourite NBA team!",
                            ImageUrl = "\\images\\products\\Back Me Up NBA Golden State Stickers.jpg",
                            Name = "NBA Golden State Stickers",
                            Price = 0.90000000000000002
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 15,
                            Description = "A pack of two stickers featuring your favourite NBA team!",
                            ImageUrl = "\\images\\products\\Back Me Up NBA Milwauke Bucks Stickers.png",
                            Name = "NBA Milwauke Bucks Stickers",
                            Price = 0.90000000000000002
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 15,
                            Description = "A pack of two stickers featuring your favourite NBA team!",
                            ImageUrl = "\\images\\products\\Back Me Up NBA Stickers.jpg",
                            Name = "NBA Stickers",
                            Price = 0.90000000000000002
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 15,
                            Description = "A pack of two stickers featuring your favourite NBA team!",
                            ImageUrl = "\\images\\products\\Back Me Up Phoenix Suns Stickers.jpg",
                            Name = "NBA Phoenix Suns Stickers",
                            Price = 0.90000000000000002
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 15,
                            Description = "A pack of two stickers featuring your favourite NBA team!",
                            ImageUrl = "\\images\\products\\Back Me Up Pvc Stickers Nba Boston Celtics.jpg",
                            Name = "Nba Boston Celtics Stickers",
                            Price = 0.90000000000000002
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 15,
                            Description = "A pack of two stickers featuring your favourite NBA team!",
                            ImageUrl = "\\images\\products\\Back Me Up Pvc Stickers Ny Knics.jpg",
                            Name = "NBA New York Knicks Stickers",
                            Price = 0.90000000000000002
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 15,
                            Description = "A pack of two stickers featuring your favourite NBA team!",
                            ImageUrl = "\\images\\products\\Back Me Up NBA Los Angeles Lakers Stickers.jpg",
                            Name = "NBA Los Angeles Lakers Stickers",
                            Price = 0.90000000000000002
                        });
                });

            modelBuilder.Entity("TheBuzzerBeater.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("TheBuzzerBeater.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheBuzzerBeater.Models.OrderDetail", b =>
                {
                    b.HasOne("TheBuzzerBeater.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");
                });

            modelBuilder.Entity("TheBuzzerBeater.Models.OrderHeader", b =>
                {
                    b.HasOne("TheBuzzerBeater.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TheBuzzerBeater.Models.Product", b =>
                {
                    b.HasOne("TheBuzzerBeater.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TheBuzzerBeater.Models.ShoppingCart", b =>
                {
                    b.HasOne("TheBuzzerBeater.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBuzzerBeater.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
